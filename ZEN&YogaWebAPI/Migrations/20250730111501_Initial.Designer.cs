// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZEN_Yoga.Models;

#nullable disable

namespace ZEN_YogaWebAPI.Migrations
{
    [DbContext(typeof(ZenYogaDbContext))]
    [Migration("20250730111501_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ZEN_Yoga.Models.AppAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MostPopularCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalStudios")
                        .HasColumnType("int");

                    b.Property<int?>("TotalUsers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppAnalytics");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Banja Luka"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bihać"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brčko"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Prijedor"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bijeljina"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Trebinje"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Goražde"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Travnik"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Gradačac"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Cazin"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Visoko"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Zvornik"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Bugojno"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kakanj"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Konjic"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Sanski Most"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Lukavac"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Velika Kladuša"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Živinice"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Gradiška"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Široki Brijeg"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Čapljina"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Foča"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Modriča"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Neum"
                        });
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<int>("YogaTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudioId");

                    b.HasIndex("YogaTypeId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Certificates")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Diplomas")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<int?>("StudioSubscriptionId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.HasIndex("StudioSubscriptionId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Paymments");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator for the system",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Owner of the yoga studio",
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Yoga instructor teaching the classes",
                            Name = "Instructor"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Studio members and class participants",
                            Name = "Participant"
                        });
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.StudioAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<int>("TotalParticipants")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("StudioAnalytics");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.StudioSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("StudioId", "SubscriptionTypeId")
                        .IsUnique();

                    b.ToTable("StudioSubscriptions");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationInDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DateOfBirth = new DateTime(1998, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@email.com",
                            FirstName = "Test1",
                            Gender = "M",
                            LastName = "",
                            PasswordHash = "",
                            PasswordSalt = "",
                            ProfileImageUrl = "",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            DateOfBirth = new DateTime(1995, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test2@email.com",
                            FirstName = "Test2",
                            Gender = "F",
                            LastName = "",
                            PasswordHash = "",
                            PasswordSalt = "",
                            ProfileImageUrl = "",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("ZEN_Yoga.Models.UserClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClasses");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.UserStudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscriptionStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStudio");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.YogaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("YogaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A gentle and slow-paced yoga practice focused on basic postures and breathing techniques, ideal for beginners.",
                            Name = "Hatha Yoga"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A dynamic and flowing style of yoga that synchronizes breath with movement, improving flexibility and strength.",
                            Name = "Vinyasa Yoga"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A meditative practice that targets deep connective tissues through long-held poses, promoting relaxation and flexibility.",
                            Name = "Yin Yoga"
                        });
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Class", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.Instructor", "Instructor")
                        .WithMany("InstructorClasses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.Studio", "Studio")
                        .WithMany("StudioClasses")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.YogaType", "YogaType")
                        .WithMany("YogaTypeClasses")
                        .HasForeignKey("YogaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Studio");

                    b.Navigation("YogaType");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Instructor", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.User", "User")
                        .WithOne("Instructor")
                        .HasForeignKey("ZEN_Yoga.Models.Instructor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.Studio", "Studio")
                        .WithMany("StudioInstructors")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Payment", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.Studio", "Studio")
                        .WithMany()
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.StudioSubscription", "StudioSubscription")
                        .WithMany()
                        .HasForeignKey("StudioSubscriptionId");

                    b.HasOne("ZEN_Yoga.Models.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.User", "User")
                        .WithMany("UserPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("StudioSubscription");

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Studio", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.City", "City")
                        .WithMany("Studios")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.StudioAnalytics", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.Studio", "Studio")
                        .WithMany("StudioAnalytics")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.StudioSubscription", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.Studio", "Studio")
                        .WithMany("StudioSubscriptions")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("StudioSubscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.User", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.UserClass", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.User", "User")
                        .WithMany("UserClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.UserStudio", b =>
                {
                    b.HasOne("ZEN_Yoga.Models.Studio", "Studio")
                        .WithMany("StudioMembers")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZEN_Yoga.Models.User", "User")
                        .WithMany("UserStudios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.City", b =>
                {
                    b.Navigation("Studios");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Instructor", b =>
                {
                    b.Navigation("InstructorClasses");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.Studio", b =>
                {
                    b.Navigation("StudioAnalytics");

                    b.Navigation("StudioClasses");

                    b.Navigation("StudioInstructors");

                    b.Navigation("StudioMembers");

                    b.Navigation("StudioSubscriptions");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.SubscriptionType", b =>
                {
                    b.Navigation("StudioSubscriptions");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.User", b =>
                {
                    b.Navigation("Instructor");

                    b.Navigation("UserClasses");

                    b.Navigation("UserPayments");

                    b.Navigation("UserStudios");
                });

            modelBuilder.Entity("ZEN_Yoga.Models.YogaType", b =>
                {
                    b.Navigation("YogaTypeClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
